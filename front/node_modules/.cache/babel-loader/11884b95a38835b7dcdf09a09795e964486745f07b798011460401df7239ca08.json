{"ast":null,"code":"//import router from \"../src/router/router\"  ;\nlet socket;\nexport default {\n  name: \"Im\",\n  data() {\n    return {\n      circleUrl: 'https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png',\n      user: {},\n      isCollapse: false,\n      users: [],\n      chatUser: '',\n      text: \"\",\n      messages: [],\n      content: ''\n    };\n  },\n  created() {\n    this.init();\n  },\n  methods: {\n    send() {\n      if (!this.chatUser) {\n        this.$message({\n          type: 'warning',\n          message: \"请选择聊天对象\"\n        });\n        return;\n      }\n      if (!this.text) {\n        this.$message({\n          type: 'warning',\n          message: \"请输入内容\"\n        });\n      } else {\n        if (typeof WebSocket == \"undefined\") {\n          console.log(\"您的浏览器不支持WebSocket\");\n        } else {\n          console.log(\"您的浏览器支持WebSocket\");\n          // 组装待发送的消息 json\n          // {\"from\": \"zhang\", \"to\": \"admin\", \"text\": \"聊天文本\"}\n          let message = {\n            from: this.user.username,\n            to: this.chatUser,\n            text: this.text\n          };\n          socket.send(JSON.stringify(message)); // 将组装好的json发送给服务端，由服务端进行转发\n          this.messages.push({\n            user: this.user.username,\n            text: this.text\n          });\n          // 构建消息内容，本人消息\n          this.createContent(null, this.user.username, this.text);\n          this.text = '';\n        }\n      }\n    },\n    createContent(remoteUser, nowUser, text) {\n      // 这个方法是用来将 json的聊天消息数据转换成 html的。\n      let html;\n      // 当前用户消息\n      if (nowUser) {\n        // nowUser 表示是否显示当前用户发送的聊天消息，绿色气泡\n        html = \"<div class=\\\"el-row\\\" style=\\\"padding: 5px 0\\\">\\n\" + \"  <div class=\\\"el-col el-col-22\\\" style=\\\"text-align: right; padding-right: 10px\\\">\\n\" + \"    <div class=\\\"tip left\\\">\" + text + \"</div>\\n\" + \"  </div>\\n\" + \"  <div class=\\\"el-col el-col-2\\\">\\n\" + \"  <span class=\\\"el-avatar el-avatar--circle\\\" style=\\\"height: 40px; width: 40px; line-height: 40px;\\\">\\n\" + \"    <img src=\\\"https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png\\\" style=\\\"object-fit: cover;\\\">\\n\" + \"  </span>\\n\" + \"  </div>\\n\" + \"</div>\";\n      } else if (remoteUser) {\n        // remoteUser表示远程用户聊天消息，蓝色的气泡\n        html = \"<div class=\\\"el-row\\\" style=\\\"padding: 5px 0\\\">\\n\" + \"  <div class=\\\"el-col el-col-2\\\" style=\\\"text-align: right\\\">\\n\" + \"  <span class=\\\"el-avatar el-avatar--circle\\\" style=\\\"height: 40px; width: 40px; line-height: 40px;\\\">\\n\" + \"    <img src=\\\"https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png\\\" style=\\\"object-fit: cover;\\\">\\n\" + \"  </span>\\n\" + \"  </div>\\n\" + \"  <div class=\\\"el-col el-col-22\\\" style=\\\"text-align: left; padding-left: 10px\\\">\\n\" + \"    <div class=\\\"tip right\\\">\" + text + \"</div>\\n\" + \"  </div>\\n\" + \"</div>\";\n      }\n      console.log(html);\n      this.content += html;\n    },\n    init() {\n      this.user = localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {};\n      let username = this.user.username;\n      let _this = this;\n      if (typeof WebSocket == \"undefined\") {\n        console.log(\"您的浏览器不支持WebSocket\");\n      } else {\n        console.log(\"您的浏览器支持WebSocket\");\n        let socketUrl = \"ws://localhost:9090/imserver/\" + username;\n        if (socket != null) {\n          socket.close();\n          socket = null;\n        }\n        // 开启一个websocket服务\n        socket = new WebSocket(socketUrl);\n        //打开事件\n        socket.onopen = function () {\n          console.log(\"websocket已打开\");\n        };\n        //  浏览器端收消息，获得从服务端发送过来的文本消息\n        socket.onmessage = function (msg) {\n          console.log(\"收到数据====\" + msg.data);\n          let data = JSON.parse(msg.data); // 对收到的json数据进行解析， 类似这样的： {\"users\": [{\"username\": \"zhang\"},{ \"username\": \"admin\"}]}\n          if (data.users) {\n            // 获取在线人员信息\n            _this.users = data.users.filter(user => user.username !== username); // 获取当前连接的所有用户信息，并且排除自身，自己不会出现在自己的聊天列表里\n          } else {\n            // 如果服务器端发送过来的json数据 不包含 users 这个key，那么发送过来的就是聊天文本json数据\n            //  // {\"from\": \"zhang\", \"text\": \"hello\"}\n            if (data.from === _this.chatUser) {\n              _this.messages.push(data);\n              // 构建消息内容\n              _this.createContent(data.from, null, data.text);\n            }\n          }\n        };\n        //关闭事件\n        socket.onclose = function () {\n          console.log(\"websocket已关闭\");\n        };\n        //发生了错误事件\n        socket.onerror = function () {\n          console.log(\"websocket发生了错误\");\n        };\n      }\n    }\n  }\n};","map":{"version":3,"names":["socket","name","data","circleUrl","user","isCollapse","users","chatUser","text","messages","content","created","init","methods","send","$message","type","message","WebSocket","console","log","from","username","to","JSON","stringify","push","createContent","remoteUser","nowUser","html","localStorage","getItem","parse","_this","socketUrl","close","onopen","onmessage","msg","filter","onclose","onerror"],"sources":["src/views/Im.vue"],"sourcesContent":["<template>\r\n    <div style=\"padding: 10px; margin-bottom: 50px\">\r\n      <el-row>\r\n        <el-col :span=\"8\">\r\n          <el-card style=\"width: 100%; min-height: 300px; color: #333\">\r\n           <div style=\"padding-bottom: 10px; border-bottom: 1px solid #ccc\">在线用户<span style=\"font-size: 12px\">（点击聊天气泡开始聊天）</span></div>\r\n            <div style=\"padding: 10px 0\" v-for=\"user in users\" :key=\"user.username\">\r\n              <span>{{ user.username }}</span>\r\n              <i class=\"el-icon-chat-dot-round\" style=\"margin-left: 10px; font-size: 16px; cursor: pointer\"\r\n                 @click=\"chatUser = user.username\"></i>\r\n              <span style=\"font-size: 12px;color: limegreen; margin-left: 5px\" v-if=\"user.username === chatUser\">chatting...</span>\r\n            </div>\r\n          </el-card>\r\n        </el-col>\r\n        <el-col :span=\"16\">\r\n          <div style=\"width: 800px; margin: 0 auto; background-color: white;\r\n                      border-radius: 5px; box-shadow: 0 0 10px #ccc\">\r\n            <div style=\"text-align: center; line-height: 50px;\">\r\n              Web聊天室({{ chatUser }})\r\n            </div>\r\n            <div style=\"height: 350px; overflow:auto; border-top: 1px solid #ccc\" v-html=\"content\"></div>\r\n            <div style=\"height: 200px\">\r\n              <textarea v-model=\"text\" style=\"height: 160px; width: 100%; padding: 20px; border: none; border-top: 1px solid #ccc;\r\n               border-bottom: 1px solid #ccc; outline: none\"></textarea>\r\n              <div style=\"text-align: right; padding-right: 10px\">\r\n                <el-button type=\"primary\" size=\"mini\" @click=\"send\">发送</el-button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </el-col>\r\n      </el-row>\r\n    </div>\r\n  </template>\r\n  <script>\r\n  //import router from \"../src/router/router\"  ;\r\n  let socket;\r\n  export default {\r\n    name: \"Im\",\r\n    data() {\r\n      return {\r\n        circleUrl: 'https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png',\r\n        user: {},\r\n        isCollapse: false,\r\n        users: [],\r\n        chatUser: '',\r\n        text: \"\",\r\n        messages: [],\r\n        content: ''\r\n      }\r\n    },\r\n    created() {\r\n      this.init()\r\n    },\r\n    methods: {\r\n      send() {\r\n        if (!this.chatUser) {\r\n          this.$message({type: 'warning', message: \"请选择聊天对象\"})\r\n          return;\r\n        }\r\n        if (!this.text) {\r\n          this.$message({type: 'warning', message: \"请输入内容\"})\r\n        } else {\r\n          if (typeof (WebSocket) == \"undefined\") {\r\n            console.log(\"您的浏览器不支持WebSocket\");\r\n          } else {\r\n            console.log(\"您的浏览器支持WebSocket\");\r\n            // 组装待发送的消息 json\r\n            // {\"from\": \"zhang\", \"to\": \"admin\", \"text\": \"聊天文本\"}\r\n            let message = {from: this.user.username, to: this.chatUser, text: this.text}\r\n            socket.send(JSON.stringify(message));  // 将组装好的json发送给服务端，由服务端进行转发\r\n            this.messages.push({user: this.user.username, text: this.text})\r\n            // 构建消息内容，本人消息\r\n            this.createContent(null, this.user.username, this.text)\r\n            this.text = '';\r\n          }\r\n        }\r\n      },\r\n      createContent(remoteUser, nowUser, text) {  // 这个方法是用来将 json的聊天消息数据转换成 html的。\r\n        let html\r\n        // 当前用户消息\r\n        if (nowUser) { // nowUser 表示是否显示当前用户发送的聊天消息，绿色气泡\r\n          html = \"<div class=\\\"el-row\\\" style=\\\"padding: 5px 0\\\">\\n\" +\r\n              \"  <div class=\\\"el-col el-col-22\\\" style=\\\"text-align: right; padding-right: 10px\\\">\\n\" +\r\n              \"    <div class=\\\"tip left\\\">\" + text + \"</div>\\n\" +\r\n              \"  </div>\\n\" +\r\n              \"  <div class=\\\"el-col el-col-2\\\">\\n\" +\r\n              \"  <span class=\\\"el-avatar el-avatar--circle\\\" style=\\\"height: 40px; width: 40px; line-height: 40px;\\\">\\n\" +\r\n              \"    <img src=\\\"https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png\\\" style=\\\"object-fit: cover;\\\">\\n\" +\r\n              \"  </span>\\n\" +\r\n              \"  </div>\\n\" +\r\n              \"</div>\";\r\n        } else if (remoteUser) {   // remoteUser表示远程用户聊天消息，蓝色的气泡\r\n          html = \"<div class=\\\"el-row\\\" style=\\\"padding: 5px 0\\\">\\n\" +\r\n              \"  <div class=\\\"el-col el-col-2\\\" style=\\\"text-align: right\\\">\\n\" +\r\n              \"  <span class=\\\"el-avatar el-avatar--circle\\\" style=\\\"height: 40px; width: 40px; line-height: 40px;\\\">\\n\" +\r\n              \"    <img src=\\\"https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png\\\" style=\\\"object-fit: cover;\\\">\\n\" +\r\n              \"  </span>\\n\" +\r\n              \"  </div>\\n\" +\r\n              \"  <div class=\\\"el-col el-col-22\\\" style=\\\"text-align: left; padding-left: 10px\\\">\\n\" +\r\n              \"    <div class=\\\"tip right\\\">\" + text + \"</div>\\n\" +\r\n              \"  </div>\\n\" +\r\n              \"</div>\";\r\n        }\r\n        console.log(html)\r\n        this.content += html;\r\n      },\r\n      init() {\r\n        this.user = localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {}\r\n        let username = this.user.username;\r\n        let _this = this;\r\n        if (typeof (WebSocket) == \"undefined\") {\r\n          console.log(\"您的浏览器不支持WebSocket\");\r\n        } else {\r\n          console.log(\"您的浏览器支持WebSocket\");\r\n          let socketUrl = \"ws://localhost:9090/imserver/\" + username;\r\n          if (socket != null) {\r\n            socket.close();\r\n            socket = null;\r\n          }\r\n          // 开启一个websocket服务\r\n          socket = new WebSocket(socketUrl);\r\n          //打开事件\r\n          socket.onopen = function () {\r\n            console.log(\"websocket已打开\");\r\n          };\r\n          //  浏览器端收消息，获得从服务端发送过来的文本消息\r\n          socket.onmessage = function (msg) {\r\n            console.log(\"收到数据====\" + msg.data)\r\n            let data = JSON.parse(msg.data)  // 对收到的json数据进行解析， 类似这样的： {\"users\": [{\"username\": \"zhang\"},{ \"username\": \"admin\"}]}\r\n            if (data.users) {  // 获取在线人员信息\r\n              _this.users = data.users.filter(user => user.username !== username)  // 获取当前连接的所有用户信息，并且排除自身，自己不会出现在自己的聊天列表里\r\n            } else {\r\n              // 如果服务器端发送过来的json数据 不包含 users 这个key，那么发送过来的就是聊天文本json数据\r\n              //  // {\"from\": \"zhang\", \"text\": \"hello\"}\r\n              if (data.from === _this.chatUser) {\r\n                _this.messages.push(data)\r\n                // 构建消息内容\r\n                _this.createContent(data.from, null, data.text)\r\n              }\r\n            }\r\n          };\r\n          //关闭事件\r\n          socket.onclose = function () {\r\n            console.log(\"websocket已关闭\");\r\n          };\r\n          //发生了错误事件\r\n          socket.onerror = function () {\r\n            console.log(\"websocket发生了错误\");\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  </script>\r\n  <style>\r\n  .tip {\r\n    color: white;\r\n    text-align: center;\r\n    border-radius: 10px;\r\n    font-family: sans-serif;\r\n    padding: 10px;\r\n    width:auto;\r\n    display:inline-block !important;\r\n    display:inline;\r\n  }\r\n  .right {\r\n    background-color: deepskyblue;\r\n  }\r\n  .left {\r\n    background-color: forestgreen;\r\n  }\r\n  </style>\r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}