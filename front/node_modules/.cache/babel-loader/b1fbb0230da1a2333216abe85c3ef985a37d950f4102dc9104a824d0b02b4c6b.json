{"ast":null,"code":"import request from \"@/utils/request\";\nimport emojis from \"@/assets/emoji\";\nimport { getStore } from \"@/libs/storage\";\nlet client;\nexport default {\n  data() {\n    return {\n      user: {},\n      permission: [],\n      emojis: [],\n      messages: [],\n      users: []\n    };\n  },\n  // 页面加载的时候，做一些事情，在created里面\n  mounted() {\n    this.emojis = emojis.split(',');\n    this.user = JSON.parse(localStorage.getItem('user') || \"{}\");\n    let name = window.btoa(encodeURI(JSON.parse(getStore(\"userInfo\")).username));\n    let avatar = window.btoa(encodeURI(JSON.parse(getStore(\"userInfo\")).avatar));\n    client = new WebSocket(`ws://localhost:8081/imserver/${name}/${avatar}`);\n    client.onopen = () => {\n      console.log('websocket open');\n    };\n    client.onclose = () => {\n      // 页面刷新的时候和后台websocket服务关闭的时候\n      console.log('websocket close');\n    };\n    client.onmessage = msg => {\n      if (msg.data) {\n        let json = JSON.parse(msg.data);\n        if (json.name && json.content) {\n          // 聊天消息\n          this.messages.push(json);\n          this.scrollToBottom(); // 滚动页面到最底部\n        }\n        if (json.users && json.users.length) {\n          this.users = json.users;\n          console.log('onmessage', this.users);\n        }\n      }\n    };\n    // 加载聊天数据\n    this.load();\n  },\n  beforeDestroy() {\n    if (client) {\n      client.close();\n    }\n  },\n  // 定义一些页面上控件出发的事件调用的方法\n  methods: {\n    download(file) {\n      window.open(file);\n    },\n    handleFile(file) {\n      if (client) {\n        let message = {\n          name: this.user.name,\n          content: file.data,\n          avatar: this.user.avatar\n        };\n        let extName = file.data.substring(file.data.lastIndexOf('.') + 1);\n        if (['png', 'jpg', 'jpeg', 'gif', 'bmp', 'tiff', 'svg', 'webp'].includes(extName)) {\n          message.type = 'img';\n        } else {\n          message.type = 'file';\n        }\n        let avatar = JSON.parse(getStore(\"userInfo\")).avatar;\n        message.name = JSON.parse(getStore(\"userInfo\")).username;\n        message.avatar = avatar;\n        client.send(JSON.stringify(message));\n      }\n    },\n    load() {\n      request.get('/imGroup').then(res => {\n        if (res.code === '0') {\n          this.messages = res.data;\n          this.scrollToBottom(); // 滚动条滚动到最底部\n          this.$message.success('欢迎进入群组聊天室');\n        } else {\n          this.$message.error(res.msg);\n        }\n      });\n    },\n    send() {\n      debugger;\n      let inputBox = document.getElementById('im-content');\n      const content = inputBox.innerHTML;\n      if (!content) {\n        this.$notify.error('请输入聊天内容');\n        return;\n      }\n      let avatar = JSON.parse(getStore(\"userInfo\")).avatar;\n      let username = JSON.parse(getStore(\"userInfo\")).username;\n      if (client) {\n        let message = {\n          name: this.user.name,\n          content: content,\n          avatar: this.user.avatar,\n          type: 'text'\n        };\n        message.name = username;\n        message.avatar = avatar;\n        client.send(JSON.stringify(message));\n      }\n      inputBox.innerHTML = ''; // 清空输入框\n    },\n    clickEmoji(emoji) {\n      document.getElementById('im-content').innerHTML += emoji;\n    },\n    scrollToBottom() {\n      this.$nextTick(() => {\n        // 设置聊天滚动条到底部\n        let imMessageBox = document.getElementsByClassName(\"im-message-box\")[0];\n        //设置滚动条到最底部\n        imMessageBox.scrollTop = imMessageBox.scrollHeight;\n      });\n    }\n  }\n};","map":{"version":3,"names":["request","emojis","getStore","client","data","user","permission","messages","users","mounted","split","JSON","parse","localStorage","getItem","name","window","btoa","encodeURI","username","avatar","WebSocket","onopen","console","log","onclose","onmessage","msg","json","content","push","scrollToBottom","length","load","beforeDestroy","close","methods","download","file","open","handleFile","message","extName","substring","lastIndexOf","includes","type","send","stringify","get","then","res","code","$message","success","error","inputBox","document","getElementById","innerHTML","$notify","clickEmoji","emoji","$nextTick","imMessageBox","getElementsByClassName","scrollTop","scrollHeight"],"sources":["src/views/chatOnline/imGroup.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"main-body-content\">\r\n      <div style=\"display: flex; align-items: flex-start\">\r\n        <div style=\"width: 200px;  margin-right: 10px; border: 1px solid #ddd; border-radius: 5px;\">\r\n          <div style=\"padding: 20px 10px; border-bottom: 1px solid #ddd; color: #000; background-color: #eee\">在线用户({{ users.length }})</div>\r\n          <div class=\"user-list-box\">\r\n            <div class=\"user-list-item\" v-for=\"(item, index) in users\" :key=\"index\">\r\n              <img :src=\"item.avatar\" style=\"width: 30px; height: 30px; border-radius: 50%\">\r\n              <span style=\"margin-left: 10px\">{{ item.name }}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!--  中间部分  -->\r\n        <div style=\"width: 50%; border: 1px solid #ddd; border-radius: 5px; background-color: #f1f1f1;\">\r\n          <div style=\"padding: 20px 0; text-align: center; border-bottom: 1px solid #ddd; color: #000; background-color: #eee\">聊天室</div>\r\n          <div class=\"im-message-box\">\r\n            <div v-for=\"item in messages\" :key=\"item.id\">\r\n              <!--  右边的气泡 -->\r\n              <div style=\"display: flex; flex-direction: row-reverse; align-items: flex-start\" v-if=\"item.name === user.name\">\r\n                <img :src=\"item.avatar\" alt=\"\" style=\"width: 40px; height: 40px; border-radius: 50%; margin-left: 10px\">\r\n                <div class=\"im-message im-message-right\" v-html=\"item.content\" v-if=\"item.type === 'text'\"></div>\r\n                <div class=\"im-message\" style=\"padding: 0\" v-if=\"item.type === 'img'\">\r\n                  <!-- 注意  el-image 的load函数必须加上，否则无法触发滚动条到最底端 -->\r\n                  <el-image style=\"width: 100px\" :src=\"item.content\" alt=\"\" :preview-src-list=[item.content] @load=\"scrollToBottom\"></el-image>\r\n                </div>\r\n                <div class=\"im-message im-message-download\" v-if=\"item.type === 'file'\"\r\n                     @click=\"download(item.content)\">\r\n                  <div><i class=\"el-icon-folder-opened\"></i>\r\n                    <span>{{ item.content.substring(item.content.indexOf('-') + 1) }}</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <!--  左边的气泡 -->\r\n              <div style=\"display: flex; align-items: flex-start\" v-else>\r\n                <img :src=\"item.avatar\" alt=\"\" style=\"width: 40px; height: 40px; border-radius: 50%; margin-right: 10px\">\r\n                <div style=\"width: 100%\">\r\n                  <div style=\"color: #888; font-size: 12px; width: 50%\">{{ item.name }}</div>\r\n                  <div class=\"im-message im-message-left\" v-html=\"item.content\"  v-if=\"item.type === 'text'\"></div>\r\n                  <div class=\"im-message\" style=\"padding: 0\" v-if=\"item.type === 'img'\">\r\n                    <!-- 注意  el-image 的load函数必须加上，否则无法触发滚动条到最底端 -->\r\n                    <el-image style=\"width: 100px\" :src=\"item.content\" alt=\"\"\r\n                              :preview-src-list=[item.content]\r\n                              @load=\"scrollToBottom\"></el-image>\r\n                  </div>\r\n                  <div class=\"im-message im-message-download\" v-if=\"item.type === 'file'\"\r\n                       @click=\"download(item.content)\">\r\n                    <div><i class=\"el-icon-folder-opened\"></i>\r\n                      <span>{{ item.content.substring(item.content.indexOf('-') + 1) }}</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- 输入区域 -->\r\n          <div style=\"padding: 10px 5px; border-top: 1px solid #ddd; display: flex; align-items: center; width: 100%;\">\r\n            <el-popover placement=\"top\" width=\"300\" trigger=\"click\">\r\n              <div class=\"emoji-box\">\r\n                <span v-for=\"(item, index) in emojis\" :key=\"index\"\r\n                      style=\"margin-right: 5px; font-size: 20px; cursor: pointer\" v-html=\"item\"\r\n                      @click=\"clickEmoji(item)\"></span>\r\n              </div>\r\n              <i slot=\"reference\" class=\"fa fa-smile-o\" style=\"font-size: 22px; color: #666;\"></i>\r\n            </el-popover>\r\n            <div style=\"margin-left: 5px\">\r\n              <el-upload action=\"http://localhost:8081/files/upload\" :show-file-list=\"false\" :on-success=\"handleFile\">\r\n                <i class=\"fa fa-folder-open-o\" style=\"font-size: 20px; color: #666;\"></i>\r\n              </el-upload>\r\n            </div>\r\n            <div id=\"im-content\" contenteditable style=\"flex: 1; background-color: #fff; margin: 0 5px; padding: 10px; border: 1px solid #ddd; border-radius: 2px; outline: none; font-size: 14px;\"></div>\r\n            <el-button type=\"primary\" @click=\"send\" style=\"border: none\">发送</el-button>\r\n          </div>\r\n        </div>\r\n        <!--  中间部分结束  -->\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport request from \"@/utils/request\";\r\nimport emojis from \"@/assets/emoji\";\r\nimport {getStore} from \"@/libs/storage\";\r\n\r\nlet client\r\nexport default {\r\n  data() {\r\n    return {\r\n      user: {},\r\n      permission: [],\r\n      emojis: [],\r\n      messages: [],\r\n      users: [],\r\n    }\r\n  },\r\n  // 页面加载的时候，做一些事情，在created里面\r\n  mounted() {\r\n    this.emojis = emojis.split(',')\r\n    this.user = JSON.parse(localStorage.getItem('user') || \"{}\")\r\n    let name = window.btoa(encodeURI(JSON.parse(getStore(\"userInfo\")).username))\r\n    let avatar = window.btoa(encodeURI(JSON.parse(getStore(\"userInfo\")).avatar))\r\n\r\n    client = new WebSocket(`ws://localhost:8081/imserver/${name}/${avatar}`)\r\n    client.onopen = () => {\r\n      console.log('websocket open')\r\n    }\r\n    client.onclose = () => {  // 页面刷新的时候和后台websocket服务关闭的时候\r\n      console.log('websocket close')\r\n    }\r\n    client.onmessage = (msg) => {\r\n      if (msg.data) {\r\n        let json = JSON.parse(msg.data)\r\n        if (json.name && json.content) {  // 聊天消息\r\n          this.messages.push(json)\r\n          this.scrollToBottom()  // 滚动页面到最底部\r\n        }\r\n        if (json.users && json.users.length) {\r\n\r\n          this.users = json.users\r\n          console.log('onmessage', this.users)\r\n        }\r\n      }\r\n    }\r\n    // 加载聊天数据\r\n    this.load()\r\n\r\n  },\r\n  beforeDestroy() {\r\n    if (client) {\r\n      client.close()\r\n    }\r\n  },\r\n  // 定义一些页面上控件出发的事件调用的方法\r\n  methods: {\r\n    download(file) {\r\n      window.open(file)\r\n    },\r\n    handleFile(file) {\r\n      if (client) {\r\n        let message = {name: this.user.name, content: file.data, avatar: this.user.avatar}\r\n        let extName = file.data.substring(file.data.lastIndexOf('.') + 1)\r\n        if (['png', 'jpg', 'jpeg', 'gif', 'bmp', 'tiff', 'svg', 'webp'].includes(extName)) {\r\n          message.type = 'img'\r\n        } else {\r\n          message.type = 'file'\r\n        }\r\n        let avatar = JSON.parse(getStore(\"userInfo\")).avatar\r\n        message.name = JSON.parse(getStore(\"userInfo\")).username\r\n        message.avatar = avatar\r\n        client.send(JSON.stringify(message))\r\n      }\r\n    },\r\n    load() {\r\n      request.get('/imGroup').then(res => {\r\n        if (res.code === '0') {\r\n          this.messages = res.data\r\n          this.scrollToBottom()  // 滚动条滚动到最底部\r\n          this.$message.success('欢迎进入群组聊天室')\r\n        } else {\r\n          this.$message.error(res.msg)\r\n        }\r\n      })\r\n    },\r\n    send() {\r\n      debugger\r\n      let inputBox = document.getElementById('im-content')\r\n      const content = inputBox.innerHTML\r\n      if (!content) {\r\n        this.$notify.error('请输入聊天内容')\r\n        return\r\n      }\r\n\r\n      let avatar = JSON.parse(getStore(\"userInfo\")).avatar\r\n      let username = JSON.parse(getStore(\"userInfo\")).username\r\n      if (client) {\r\n        let message = {name: this.user.name, content: content, avatar: this.user.avatar, type: 'text'}\r\n        message.name = username\r\n        message.avatar = avatar\r\n        client.send(JSON.stringify(message))\r\n      }\r\n      inputBox.innerHTML = ''  // 清空输入框\r\n    },\r\n    clickEmoji(emoji) {\r\n      document.getElementById('im-content').innerHTML += emoji\r\n    },\r\n    scrollToBottom() {\r\n      this.$nextTick(() => {\r\n        // 设置聊天滚动条到底部\r\n        let imMessageBox = document.getElementsByClassName(\"im-message-box\")[0]\r\n        //设置滚动条到最底部\r\n        imMessageBox.scrollTop = imMessageBox.scrollHeight\r\n      })\r\n\r\n    },\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.im-message-box {\r\n  height: 50vh;\r\n  padding: 10px;\r\n  overflow-y: auto;\r\n  background-color: white;\r\n}\r\n\r\n.emoji-box {\r\n  height: 200px;\r\n  overflow-y: scroll;\r\n  line-height: 30px;\r\n}\r\n.user-list-box {\r\n  height: calc(50vh + 60px);\r\n  overflow-y: scroll;\r\n  background-color: #f8f8ff;\r\n}\r\n.im-message-box::-webkit-scrollbar, .emoji-box::-webkit-scrollbar, .user-list-box::-webkit-scrollbar {\r\n  width: 4px;\r\n}\r\n\r\n.im-message-box::-webkit-scrollbar-thumb, .emoji-box::-webkit-scrollbar-thumb, .user-list-box::-webkit-scrollbar-thumb {\r\n  border-radius: 10px;\r\n  background: rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.im-message-box::-webkit-scrollbar-track, .emoji-box::-webkit-scrollbar-track, .user-list-box::-webkit-scrollbar-track {\r\n  border-radius: 0;\r\n  background: rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.im-message {\r\n  font-size: 14px;\r\n  padding: 10px;\r\n  margin: 5px 0;\r\n  border-radius: 5px;\r\n  color: #000;\r\n  max-width: 50%;\r\n  line-height: 20px;\r\n  width: fit-content;\r\n}\r\n\r\n.im-message-left {\r\n  background-color: #fff;\r\n}\r\n\r\n.im-message-right {\r\n  background-color: #26d470;\r\n}\r\n\r\n.im-message-download {\r\n  background-color: #DBEDFF;\r\n  cursor: pointer;\r\n}\r\n\r\n.user-list-item {\r\n  padding: 10px;\r\n  display: flex;\r\n  align-items: center;\r\n  border-bottom: 1px solid #eee;\r\n  cursor: default;\r\n  font-size: 14px;\r\n}\r\n.user-list-item:nth-last-child(1) {\r\n  border: none;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}